:PROPERTIES:
:ID:       20241123T191032.280227
:END:
#+title: FPP Phase 3 --- Tokenize
#+author: INCITS/Fortran JoR
#+date: [2023-10-24 Tue 11:27]
#+options: toc:nil
#+startup: showall
#+options: toc:t H:5 num:4
#+latex_header: \usepackage{titlesec}
# #+latex_header: \usepackage{parskip}
#+latex_header: \usepackage{hyperref}
#+latex_header: \usepackage{textgreek}
#+latex_header: \usepackage{listings}
#+latex_header: \hypersetup{linktoc = all, colorlinks = true, urlcolor = blue, citecolor = blue, linkcolor = blue}
#+latex_header: \titlespacing{\subsection}{0pt}{*4}{*1.5}
#+latex_header: \titlespacing{\subsubsection}{0pt}{*4}{*1.5}
# #+latex_header: \parindent=0pt
#+latex_header: \setcounter{secnumdepth}{5}
#+latex_header: \setcounter{tocdepth}{4}


#  LocalWords:  Clu Lio Ble Kli Fortranized Jor VARNAME


* Introduction
The INCITS/Fortran committee has discussed several times in the Plenary meetings, and the JoR subgroup has met several times, to lay down formal requirements for the proposed Fortran preprocessor (FPP) for Fortran 202y (presumably 2028).

#+include: "req-inc-phase-list.org" :only-contents :minlevel 1

This paper lists the requirements and syntax for Phase 3 of the preprocessor, the tokenizer. It takes the output from Phase 2 as a stream of logical input lines and converts them to lexical tokens suitable for the next phase, which will preprocess directives.

#+include: "req-inc-sources.org" :only-contents :minlevel 1


* Detailed requirements
:PROPERTIES:
:COLUMNS:  %30reqid(ID) %6status(Status) %10TAGS(Export) %30csource(Sources) %60ITEM(Description)
:END:

We list the detailed requirements for the Fortran 202y preprocessor tokenizer.

#+include: "req-inc-dir-whitespace" :minlevel 3

** Case sensitive macro names and argument names
:PROPERTIES:
:reqid: [tokens-case-sensitive]
:status: TBD
:source: [C2018§5.2.1 Character sets], [Flpp§1·1]
:tests: [Flpp§pp004.F]
:END:

FPP /is/ case-sensitive when recognizing identifiers even thoughFortran is not case-sensitive
The text fragment
#+begin_src fortran
#define abc XYZ
#define ABC foo
      subroutine abc
#+end_src

should expand to
#+begin_src fortran
      subroutine XYZ
#+end_src

Note that this creates (perhaps astonishing) behavior, such as
#+begin_src fortran
#define ABC var_1
#define abc var_2
      abc = ABC + 1     ! Normally, Fortran treats these as the same identifier
#+end_src

expanding to
#+begin_src fortran
      var_2 = var_1 + 1    ! These identifiers are now different
#+end_src

Fortran programmers may expect it to expand to
#+begin_src fortran
      var_2 = var_2 + 1    ! Only the second definition matters
#+end_src


** Case sensitive directive names
:PROPERTIES:
:reqid: [dir-case-sensitive]
:status: joryes
:source: [C2018§5.2.1 Character sets], [Flpp§1·1]
:tests: [Flpp§pp004.F]
:END:

** Spaces significant in determining tokens
:PROPERTIES:
:reqid: [spaces-end-token]
:status: joryes,
:source: [Flpp§]
:END:

In order to simplify the preprocessor tokenization, spaces are significant, even in fixed-form source.


** Identifier tokens are not broken by free-form line continuations
:PROPERTIES:
:reqid: [identifiers-span-continuations]
:status: joryes
:source: jor4, [F2023§6.2.2C601]
:tests: [Flpp pp005.F KWM split across continuation, implicit padding], [Flpp pp006.F ditto, but with intervening *comment line]
:END:

In fixed-form, there are only 66 characters available for statement text (columns 7-72). The maximum length of an identifier is 63 characters. It is not practical to have identifiers end at a fixed-form line boundary at column 72.


** Questions
*** =#if=, =#elif=: Can we tell if =!= is used for comment?

*** =#define= Can we tell if =!= is used as a comment?

*** Examine the unrecognized directives: how to tokenize?



* Further investigation of existing Fortran projects

[[bibliographystyle:alpha]]
[[bibliography:references.bib]]
