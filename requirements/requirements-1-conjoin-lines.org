:PROPERTIES:
:ID:       20231024T112734.315362
:END:
#+title: Preprocessor Phase 0 Line Conjoiner Requirements
#+author: INCITS/Fortran JoR
#+date: November 14, 2024
#+options: toc:nil
#+startup: showall
#+options: toc:t H:5 num:4
#+latex_header: \usepackage{titlesec}
# #+latex_header: \usepackage{parskip}
#+latex_header: \usepackage{hyperref}
#+latex_header: \usepackage{textgreek}
#+latex_header: \usepackage{listings}
#+latex_header: \hypersetup{linktoc = all, colorlinks = true, urlcolor = blue, citecolor = blue, linkcolor = blue}
#+latex_header: \titlespacing{\subsection}{0pt}{*4}{*1.5}
#+latex_header: \titlespacing{\subsubsection}{0pt}{*4}{*1.5}
# #+latex_header: \parindent=0pt
#+latex_header: \setcounter{secnumdepth}{5}
#+latex_header: \setcounter{tocdepth}{4}


#  LocalWords:  Clu Lio Ble Kli Fortranized Jor VARNAME


* Introduction
INCITS/Fortran has talked several times in Plenary, and the JoR subgroup has met several times, to lay down formal requirements for the proposed Fortran preprocessor (FPP) for Fortran 202y (presumably 2028).

This paper lists the requirements and syntax for Phase 0 of the preprocessor, the Line Conjoiner.

# #+include: "./requirements-0-intro.org::*Citing standards and /de facto/ standards"


# #+include: "./requirements-0-intro.org::*Translation phases"

# * The form of the requirements
# #+include: "./requirements-0-intro.org::*Detailed requirements"

# #+include: "./requirements-0-intro.org::*Requirement sources"



* Phase 1, Line Conjoiner requirements
:PROPERTIES:
:COLUMNS:  %30reqid(ID) %6status(Status) %10TAGS(Export) %30csource(Sources) %60ITEM(Description)
:END:


** Directives

*** Directive lines are not bound by fixed-form conventions

**** Column 6 in a directive line does not mark a continuation
:PROPERTIES:
:reqid: [dir-column-6-not-cont]
:status: TBD
:source: [Flpp§]
:references: [C§5.1.1.2¶1·2 Translation phases]
:END:

*** Recognize C-style ~\new-line~ line continuations in directives
:PROPERTIES:
:reqid: [c-backslash-dir]
:status: TBD
:source: ]
:references: [C§5.1.1.2¶1·2 Translation phases], [Flpp§1·3 Fixed form right margin clipping
:END:

In a directive line fixed-form and free-from source code, delete a backslash ~\~ immediately followed by a new-line character. The following line continues the directive line.

From The C standard:
#+begin_quote
Each instance of a backslash character (\) immediately followed by a new-line character is deleted, splicing physical source lines to form logical source lines. Only the last backslash on any physical source line shall be eligible for being part of such a splice. A source file that is not empty shall end in a new-line character, which shall not be immediately preceded by a backslash character before any such splicing takes place.
#+end_quote

*** Comment lines in definitions with continuation lines
:PROPERTIES:
:reqid: [comment-definition-cont]
:status: TBD
:source: [Flpp§], [C§6.10 Preprocessing directives]
:END:


** Fixed form Fortran
*** Remove Fortran line 6 continuation in fixed-form Fortran text
:PROPERTIES:
:reqid: [fortran-cont-fixed-6]
:status: TBD
:source: che1
:END:

In fixed-form input, a character in column 6 that is not blank or the digit zero continues the line with the previous line, even if the previous line is a directive line, or the continuation of a directive line.



*** Identifier tokens are not broken by fixed-form line continuations
:PROPERTIES:
:reqid: [identifiers-span-continuations]
:status: TBD
:source: jor4, [F2023§6.2.2C601]
:tests: [Flpp pp005.F KWM split across continuation, implicit padding], [Flpp pp006.F ditto, but with intervening *comment line]
:END:

In fixed-form, there are only 66 characters available for statement text (columns 7-72). The maximum length of an identifier is 63 characters. It is not practical to have identifiers end at a fixed-form line boundary at column 72.


** Free form Fortran
*** Remove Fortran ~&~ line continuation in free-form Fortran text
:PROPERTIES:
:reqid: [fortran-cont-free-amp]
:status: TBD
:source: che1, [C§6.10 Preprocessing directives]
:END:

In free-form input, an ~&~ character as the last character on a directive line indicates the directive continues on the next line. The handling of the continuation is as described in [F2023§6.3.2.4].


*** Remove Fortran ~&~ line continuation followed by ~!~ comment in free-form Fortran text
:PROPERTIES:
:reqid: [fortran-cont-free-amp-comment]
:status: TBD
:source:   che1, [C§6.10 Preprocessing directives], [F2023§6.3.2.3 Free form commentary], [F2023§6.3.2.4 Free form statement continuation]
:END:

In free-form input, an ~&~ character as the last character on a directive line indicates the directive continues on the next line. The handling of the continuation is as described in [F2023§6.3.2.4].
*** Remove leading spaces before ~&~ in Fortran line continuation in free form
:PROPERTIES:
:REQID:    [fortran-cont-free-rm-lead-amp]
:status: TBD
:source: che1, [C§6.10 Preprocessing directives]
:END:

In free-form input, an ~&~ character as the last character on a directive line indicates the directive continues on the next  line. When the first non-blank character on the next line is also an ~&~, the characters between the ampersands are deleted.




** Questions
*** How do we handle comments embedded between continuation lines?


*** Are any comment-based directives sandwiched between continuation lines?



[[bibliographystyle:alpha]]
[[bibliography:references.bib]]
