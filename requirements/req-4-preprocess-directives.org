:PROPERTIES:
:ID:       20241123T190939.723895
:END:
#+title: FPP Phase 4: Preprocess Directives
#+author: INCITS/Fortran JoR
#+date: {{{modification-time(%B %d\, %Y)}}}
#+options: toc:nil
#+startup: showall
#+include: "latex-options.org"
#+options: toc:t H:5 num:4

#  LocalWords:  Clu Lio Ble Kli Fortranized Jor VARNAME


* Introduction
The INCITS/Fortran committee has discussed several times in the Plenary meetings, and the JoR subgroup has met several times, to lay down formal requirements for the proposed Fortran preprocessor (FPP) for Fortran 202y (presumably 2028).

This paper lists the requirements and syntax for Phase 4 of the preprocessor, which processes directives after Phase 3 tokenizes the input stream.

#+include: "req-inc-phase-list.org" :only-contents :minlevel 1


* High-level requirements
Steve Lionel, the ISO WG 5 (Fortran) Convenor, presented this list of high-level requirements at INCITS/Fortran meeting #232, February 2024 [[cite:&j3-jor-2024-preproc-take-2]]

Fortran programmers use preprocessing for several reasons:
- Adjusting external names for C interoperability (largely obviated by C interop features in the language)
- Platform/OS specific code
- Debug or other variants of code
- A crude way of implementing templates

Explicit goals for Fortran 202y were
- Define cpp-style preprocessor in the standard
- Ideally, most existing uses of preprocessing will "just work", or need minimal changes
- Feature will not be optional, but implementations are encouraged to offer an option to "do it the old way"
- "Minimum Viable Product" – don't try to do everything

Features should have the same semantics as the C preprocessor, except as noted.
- =__LINE__= and =__FILE__= defined macros
- =#line=
- =#ifdef=, =#ifndef=, =#endif=
- =#if=, =#elif=, =#else=, =#endif=
- =#define= and =#undef=
- =#include=
- =#error=
- =#= operator (character literal from token)
- =##= operator (token concatenation)
- =/* ... */= C-style comments are allowed in directives (including multi-line comments)
- =\= new-line continuations allowed in directives
- =#pragma= directive for implementation-specific directives

- Macro expansion
    - tokens are case-sensitive
    - tokens are not replaced in character literals
    - tokens are not replaced in Hollerith strings
    - tokens are not replaced in /letter-spec-list/ of =IMPLICIT= statements
    - tokens are not replaced in column 6 in fixed-form source
    - tokens are replaced in comment-style directives (such as =!omp$=, =!dir$=)

- Expressions
    - =defined= operator
    - =//= is the Fortran concatenation operator; it does not introduce a C-style comment
    - =!= is the C ``not'' operator; it does not introduce a Fortran comment


* Detailed requirements
We list the detailed requirements for handling preprocessor directives.

Each requirement is a heading with a ``One-line description'', followed by a short table that contains  a unique identifier, the requirement's current status in the INCITS/Fortran approval process, and where the requirement came from (such as a C or Fortran standard, an INCITS meeting, or on email conversation).

[Note: We omit the detailed requirements; I postponed work on this to focus on semantics.]

# #+include: "req-inc-sources.org" :only-contents :minlevel 2


** # non-directive                                          :noexport:
|-----------------+--------+-----------------------------------|
| *ID*              | *Status* | *Sources*                           |
|-----------------+--------+-----------------------------------|
| [non-directive] | TBD    | [C§6.10 Preprocessing directives] |
|-----------------+--------+-----------------------------------|


** Conditional inclusion                                          :noexport:
*** # if /constant-expression/
|-------+--------+----------------------------------|
| *ID*    | *Status* | *Sources*                          |
|-------+--------+----------------------------------|
| [#if] | TBD    | [C§6.10.1 Conditional inclusion] |
|-------+--------+----------------------------------|



*** # ifdef /identifier/                                          :noexport:
|----------+--------+----------------------------------|
| *ID*       | *Status* | *Sources*                          |
|----------+--------+----------------------------------|
| [#ifdef] | TBD    | [C§6.10.1 Conditional inclusion] |
|----------+--------+----------------------------------|


*** # ifndef /identifier/                                          :noexport:
|-----------+--------+----------------------------------|
| *ID*        | *Status* | *Sources*                          |
|-----------+--------+----------------------------------|
| [#ifndef] | TBD    | [C§6.10.1 Conditional inclusion] |
|-----------+--------+----------------------------------|


*** # elif /constant-expression/                                          :noexport:
|---------+--------+----------------------------------|
| *ID*    | *Status* | *Sources*                          |
|---------+--------+----------------------------------|
| [#elif] | TBD    | [C§6.10.1 Conditional inclusion] |
|---------+--------+----------------------------------|


*** # else                                          :noexport:
|---------+--------+----------------------------------|
| *ID*      | *Status* | *Sources*                          |
|---------+--------+----------------------------------|
| [#else] | TBD    | [C§6.10.1 Conditional inclusion] |
|---------+--------+----------------------------------|


*** # endif                                          :noexport:
|----------+--------+----------------------------------|
| *ID*       | *Status* | *Sources*                          |
|----------+--------+----------------------------------|
| [#endif] | TBD    | [C§6.10.1 Conditional inclusion] |
|----------+--------+----------------------------------|


** Source file inclusion                                          :noexport:
*** # include /char-literal-constant/
|------------+--------+--------------------------------------------|
| *ID*         | *Status* | *Sources*                                    |
|------------+--------+--------------------------------------------|
| [#include] | TBD    | [C§6.10.2 Source file inclusion]           |
|            |        | [F2023§7.4.4.3 Character literal constant] |
|            |        | [F2023§6.4 Including source text]          |
|------------+--------+--------------------------------------------|


*** # include /pp-tokens/
|---------------------+--------+----------------------------------|
| *ID*                  | *Status* | *Sources*                          |
|---------------------+--------+----------------------------------|
| [#include-computed] | TBD    | [C§6.10.2 Source file inclusion] |
|---------------------+--------+----------------------------------|


** Macro definition                                               :noexport:
*** # define id replacement-list
|--------------+--------+------------------------------|
| *ID*           | *Status* | *Sources*                      |
|--------------+--------+------------------------------|
| [#define-id] | TBD    | [C§6.10.3 Macro replacement] |
|--------------+--------+------------------------------|


*** # define id ( id-list ) replacement-list
|-----------------------+--------+------------------------------|
| *ID*                    | *Status* | *Sources*                      |
|-----------------------+--------+------------------------------|
| [#define-id-function] | TBD    | [C§6.10.3 Macro replacement] |
|-----------------------+--------+------------------------------|


*** # define id ( ... ) replacement-list
|------------------------+--------+------------------------------|
| *ID*                     | *Status* | *Sources*                      |
|------------------------+--------+------------------------------|
| [#define-id-0-varargs] | TBD    | [C§6.10.3 Macro replacement] |
|------------------------+--------+------------------------------|


*** # define id ( id-list , ... ) replacement-list
|------------------------+--------+------------------------------|
| *ID*                     | *Status* | *Sources*                      |
|------------------------+--------+------------------------------|
| [#define-id-n-varargs] | TBD    | [C§6.10.3 Macro replacement] |
|------------------------+--------+------------------------------|


*** # undef
|----------+--------+--------------------------------|
| *ID*       | *Status* | *Sources*                        |
|----------+--------+--------------------------------|
| [#undef] | TBD    | [C§6.10.3.5 Macro replacement] |
|----------+--------+--------------------------------|


** Line control                                          :noexport:
*** # line
|---------+--------+-------------------------|
| *ID*      | *Status* | *Sources*                 |
|---------+--------+-------------------------|
| [#line] | TBD    | [C§6.10.4 Line control] |
|---------+--------+-------------------------|


** Error directive                                          :noexport:
*** # error
|----------+--------+----------------------------|
| *ID*       | *Status* | *Sources*                    |
|----------+--------+----------------------------|
| [#error] | TBD    | [C§6.10.5 Error directive] |
|----------+--------+----------------------------|

*** # warning
|------------+--------+----------------------------|
| *ID*         | *Status* | *Sources*                    |
|------------+--------+----------------------------|
| [#warning] | TBD    | [C§6.10.5 Error directive] |
|------------+--------+----------------------------|


** Pragma directive                                          :noexport:
*** # pragma
|-----------+--------+-----------------------------|
| *ID*        | *Status* | *Sources*                     |
|-----------+--------+-----------------------------|
| [#pragma] | TBD    | [C§6.10.6 Pragma directive] |
|-----------+--------+-----------------------------|


** Null directive                                          :noexport:

*** # newline
|------------+--------+---------------------------|
| *ID*         | *Status* | *Sources*                   |
|------------+--------+---------------------------|
| [#newline] | TBD    | [C§6.10.7 Null directive] |
|------------+--------+---------------------------|


** Predefined macros                                          :noexport:

*** =__FILE__= Current file name
|---------------------------+--------+-----------------------------------|
| *ID*                        | *Status* | *Sources*                           |
|---------------------------+--------+-----------------------------------|
| [macro-file-name-context] | TBD    | [C§6.10.8 Predefined macro names] |
|---------------------------+--------+-----------------------------------|


*** =__LINE__= Current line number
|-----------------------------+--------+-----------------------------------|
| *ID*                          | *Status* | *Sources*                           |
|-----------------------------+--------+-----------------------------------|
| [macro-line-number-context] | TBD    | [C§6.10.8 Predefined macro names] |
|-----------------------------+--------+-----------------------------------|


*** =__STDFORTRAN__= Fortran compiler (1)
|--------------+--------+-------------------------------------|
| *ID*           | *Status* | *Sources*                             |
|--------------+--------+-------------------------------------|
| [macro-stdf] | TBD    | fa[C§6.10.8 Predefined macro names] |
|--------------+--------+-------------------------------------|


*** =__STDF_HOSTED__= Compiler is hosted cross-compiler (e.g., 202311)
|---------------------+--------------+-------------------------------------|
| *ID*                  | *Status*       | *Sources*                             |
|---------------------+--------------+-------------------------------------|
| [macro-stdf-hosted] | Not accepted | fa[C§6.10.8 Predefined macro names] |
|---------------------+--------------+-------------------------------------|


*** =__STDFORTRAN_VERSION__= Fortran standard conformance
|----------------------+--------+-------------------------------------|
| *ID*                   | *Status* | *Sources*                             |
|----------------------+--------+-------------------------------------|
| [macro-stdf-version] | TBD    | fa[C§6.10.8 Predefined macro names] |
|----------------------+--------+-------------------------------------|


*** =__DATE__= of processing
|---------------------------+--------+-----------------------------------|
| *ID*                        | *Status* | *Sources*                           |
|---------------------------+--------+-----------------------------------|
| [macro-file-process-date] | TBD    | [C§6.10.8 Predefined macro names] |
|---------------------------+--------+-----------------------------------|


*** =__TIME__= time of processing
|---------------------------+--------+-----------------------------------|
| *ID*                        | *Status* | *Sources*                           |
|---------------------------+--------+-----------------------------------|
| [macro-file-process-time] | TBD    | [C§6.10.8 Predefined macro names] |
|---------------------------+--------+-----------------------------------|


*** =STRINGIFY= macro function
|----------------------------+--------+---------|
| *ID*                         | *Status* | *Sources* |
|----------------------------+--------+---------|
| [macro-stringify-function] | JoR No | clu1    |
|----------------------------+--------+---------|

Tom Clune requested a macro named =stringify=, which apparently is commonly used in some codes. There is no stadard =stringify= macro, so JoR declined to add one.


*** =__SCOPE__= defines current lexical scope
|----------------------------+--------+------------|
| *ID*                         | *Status* | *Sources*    |
|----------------------------+--------+------------|
| [macro-lexical-scope-name] | JoR No | clu1, lio1 |
|----------------------------+--------+------------|


*** =__VENDOR__=
|---------------------+--------------+---------|
| *ID*                  | *Status*       | *Sources* |
|---------------------+--------------+---------|
| [macro-vendor-name] | Not accepted | clu1    |
|---------------------+--------------+---------|


*** No undecorated names (no =_=) defined by preprocessor
|------------------------+--------+---------|
| *ID*                     | *Status* | *Sources* |
|------------------------+--------+---------|
| [macro-no-undecorated] | TBD    | lio2    |
|------------------------+--------+---------|


** Expressions                                          :noexport:

*** =#=
|--------------+--------+-----------------------------|
| *ID*           | *Status* | *Sources*                     |
|--------------+--------+-----------------------------|
| [#-operator] | TBD    | [C§6.10.3.2 The # operator] |
|--------------+--------+-----------------------------|


*** =##=
|---------------+--------+------------------------------|
| *ID*            | *Status* | *Sources*                      |
|---------------+--------+------------------------------|
| [##-operator] | TBD    | [C§6.10.3.3 The ## operator] |
|---------------+--------+------------------------------|


*** =defined= /identifier/
|--------------------+--------+----------------------------------|
| *ID*                 | *Status* | *Sources*                          |
|--------------------+--------+----------------------------------|
| [defined-operator] | TBD    | [C§6.10.1 Conditional inclusion] |
|--------------------+--------+----------------------------------|


*** =defined= =(= /identifier/ =)=
|--------------------+--------+----------------------------------|
| *ID*                 | *Status* | *Sources*                          |
|--------------------+--------+----------------------------------|
| [defined-operator] | TBD    | [C§6.10.1 Conditional inclusion] |
|--------------------+--------+----------------------------------|


*** =!=
|-----------------+--------+-----------------------------------|
| *ID*              | *Status* | *Sources*                           |
|-----------------+--------+-----------------------------------|
| [bang-operator] | TBD    | [C§6.10 Preprocessing directives] |
|-----------------+--------+-----------------------------------|


*** [c-expressions] C-style expressions
|-----------------+--------+-----------------------------------|
| *ID*              | *Status* | *Sources*                           |
|-----------------+--------+-----------------------------------|
| [c-expressions] | TBD    | [C§6.10 Preprocessing directives] |
|-----------------+--------+-----------------------------------|


*** [fortran-expressions] Fortran-style expressions
|-----------------------+--------+-----------------------------------|
| *ID*                    | *Status* | *Sources*                           |
|-----------------------+--------+-----------------------------------|
| [fortran-expressions] | TBD    | [C§6.10 Preprocessing directives] |
|-----------------------+--------+-----------------------------------|



** Expansion                                                      :noexport:

*** No expansion of function macro names not followed by parenthesis
|-----------------------------------+--------+-----------------------------------|
| *ID*                                | *Status* | *Sources*                           |
|-----------------------------------+--------+-----------------------------------|
| [no-expand-function-non-function] | TBD    | [C§6.10 Preprocessing directives] |
|                                   |        | [G14§3.3 Macro Arguments]         |
|-----------------------------------+--------+-----------------------------------|

String constants are output without being examined for macro expansion.


*** Function macro invocation may cross logical line boundaries
|-----------------------------------+--------+--------------------------------------|
| *ID*                                | *Status* | *Sources*                              |
|-----------------------------------+--------+--------------------------------------|
| [expand-function-macro-multiline] | TBD    | [C§6.10 Preprocessing directives]    |
|                                   |        | [G§3.3 Macro Arguments]              |
|                                   |        | [G14§3.10.5 Self-Referential Macros] |
|-----------------------------------+--------+--------------------------------------|

String constants are output without being examined for macro expansion.


*** No expansion of self-referential macro names
|----------------------------+--------+--------------------------------------|
| *ID*                         | *Status* | *Sources*                              |
|----------------------------+--------+--------------------------------------|
| [no-expand-self-reference] | TBD    | [C§6.10 Preprocessing directives]   |
|                            |        | [G14§3.10.5 Self-Referential Macros] |
|----------------------------+--------+--------------------------------------|

String constants are output without being examined for macro expansion.


*** No expansion in strings
|--------------------+--------+-----------------------------------|
| *ID*                 | *Status* | *Sources*                           |
|--------------------+--------+-----------------------------------|
| [no-expand-string] | TBD    | ble1, [Flpp§]                     |
|                    |        | [C§6.10 Preprocessing directives] |
|--------------------+--------+-----------------------------------|

String constants are output without being examined for macro expansion.


*** No expansion in Hollerith
|-----------------------+--------+-----------------------------------|
| *ID*                    | *Status* | *Sources*                           |
|-----------------------+--------+-----------------------------------|
| [no-expand-hollerith] | TBD    | ble1                              |
|                       |        | [C§6.10 Preprocessing directives] |
|-----------------------+--------+-----------------------------------|

No expansion occurs in the string contained in a Hollerith constant.


*** No expansion in =IMPLICIT= single-character specifiers
|--------------------------------+--------+---------|
| *ID*                             | *Status* | *Sources* |
|--------------------------------+--------+---------|
| [no-expand-implicit-char-list] | TBD    | ble1    |
|--------------------------------+--------+---------|

The letters in an =IMPLICIT= statement are not considered for macro expansion.

Note that this implies the preprocessor recognizes =IMPLICIT= statements.


*** No expansion in =FORMAT= specifiers
|--------------------+--------+----------------------|
| *ID*                 | *Status* | *Sources*              |
|--------------------+--------+----------------------|
| [no-expand-format] | TBD    | ble1,                |
|                    |        | [Flpp§]              |
|                    |        | [F20123§13.2.1R1301] |
|--------------------+--------+----------------------|

In =FORMAT= statements, there is no macro expansion in the /format-specification/..

Note that this implies the preprocessor recognizes =FORMAT= statements.


*** Expand =INCLUDE= lines as if =#include=
|------------------------------+--------+---------------------|
| *ID*                           | *Status* | *Sources*             |
|------------------------------+--------+---------------------|
| [preprocess-fortran-include] | TBD    | [Flpp§], jor1, JoR4 |
|------------------------------+--------+---------------------|

Assuming the preprocessor is a mandatory part of the Fortran standard, preprocessor directives are allowed in the file specified in a Fortran =INCLUDE= line. Therefore, the preprocessor should process the =INCLUDE=-ed file as if it had been invoked via the =#include= directive.

Otherwise, where will the handling of directives the included file be handled, and how can it use any of the macro definitions available at the time the =INCLUDE= statement is encountered. (It is likely to be included in multiple places in the application.)


*** Expand macro names in /kind-param/ in literal constants
|---------------------+--------+-------------------------------------------------|
| *ID*                  | *Status* | *Sources*                                         |
|---------------------+--------+-------------------------------------------------|
| [expand-kind-param] | TBD    | JoR3                                            |
|                     |        | [F2023§7.4.3.1R709 Integer type]                |
|                     |        | [F2023§7.4.3.2R714 Real type]                   |
|                     |        | [F2023§7.4.4.3R724 Character literal constant], |
|                     |        | [F2023§7.4.5R725 Logical type]                  |
|---------------------+--------+-------------------------------------------------|

If the /kind-param/ is a /scalar-int-constant-name/ following the underscore in an /int-literal-constant/, /real-literal-constant/, and /logical-literal-constant/, that constant name is subject to macro expansion. This needs to be explicit, as otherwise the preprocessor might treat =_kind-name= as an identifier, as many preprocessor predefined macro names begin with an underscore.

In a /char-literal-constant/, if the /kind-param/ preceding the underscore (=_=) is a /scalar-int-constant-name/, that constant name is subject to macro expansion. This needs to be explicit, as otherwise the preprocessor might treat =kind-name_= as an identifier.


**  Output form                   :noexport:
The user may request the preprocessor to produce the source representation after preprocessing. How this is requested is processor-dependent. If provided, the source form of the preprocessor output shall be bound by the following requirements.

*** =#line= and =#file= directives in the output
|--------------------------------+--------+--------------------------------|
| *ID*                             | *Status* | *Sources*                        |
|--------------------------------+--------+--------------------------------|
| [output-provenance-directives] | TBD    | [Flpp§]                        |
|                                |        | jor4                           |
|                                |        | [F2023§6.3.2 Free source form] |
|--------------------------------+--------+--------------------------------|

To show source code origin information (such as for error messages), the preprocessor may generate such origin information in the form of =#line= and =#file= directives. These directive lines may be up to 10,000 characters long, as in free-form Fortran input.


*** Directive lines begin with a =#= in column 1
|------------------------------+--------+---------------------------------|
| *ID*                           | *Status* | *Sources*                         |
|------------------------------+--------+---------------------------------|
| [output-directives-column-1] | TBD    | [Flpp§]                         |
|                              |        | jor4                            |
|                              |        | [F2023§6.3.3 Fixed source form] |
|------------------------------+--------+---------------------------------|


*** Fixed-form input becomes fixed-form output
|-------------------------+--------+---------------------------------|
| *ID*                      | *Status* | *Sources*                         |
|-------------------------+--------+---------------------------------|
| [output-fixed-to-fixed] | TBD    | [Flpp§]                         |
|                         |        | jor4                            |
|                         |        | [F2023§6.3.3 Fixed source form] |
|-------------------------+--------+---------------------------------|

When the preprocessor produces output corresponding to fixed-form Fortran input (such as with the =-E= option supported by some C compilers), it must produce valid Fortran fixed-form source code. This may require re-flowing the preprocessed output to the 72-column boundary.

- Column 1 :: Comments begin with a =C= or =c= in column 1.
- Columns 1-5 :: Optional statement label.
- Column 6 :: =0= or blank if not a continuation; continuation line otherwise.
- Columns 7-72 :: Fortran statement text


*** Free-form input becomes free-form output
|-----------------------+--------+--------------------------------|
| *ID*                    | *Status* | *Sources*                        |
|-----------------------+--------+--------------------------------|
| [output-free-to-free] | TBD    | [Flpp§]                        |
|                       |        | [F2023§6.3.2 Free source form] |
|-----------------------+--------+--------------------------------|

When the preprocessor produces output corresponding to free-form Fortran input (such as with the =-E= option supported by some C compilers), it must produce valid free-form Fortran source code. This may require re-flowing the preprocessed output to the 10,000-column boundary.

- Columns 1-10,000 :: Up to 10,000 characters of Fortran source text. If the source text is longer than 10,000 characters, up to 9,999 characters followed by =&= to continue additional source text on the next physical line, continuing up until one million characters of Fortran source.



* Syntax
The Bison grammar recognized in Phase 4 is in a separate file. [[cite:&donnelly-2021-bison-manual]]




[[bibliographystyle:alpha]]
[[bibliography:references.bib]]
